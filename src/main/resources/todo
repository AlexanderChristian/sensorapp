2024-10-05
    Create simple consumer/producer for PoC
    Refactor simple/consumer producer
        Have a consumer and a producer interface separated

    Make the sensors return 20 messages per second and make them work in parallel

    Unsorted
        Find the best place to normalize data to m/s^2

2024-10-06
    Add validation for messages coming in

    Split in two services

    Add timestamped doubles for average checking.

    Add normalization strategies

    //We need to add proper polling to not re-send previous messages

    Done
        Task 1 - Add timestamped accelerations for ease of removal. For now UTC AlexanderChristian
        Task 2 - Add tests and try to fix sliding window timing edge cases AlexanderChristian
        Task 3 - Fix timing edge cases by using message creation date instead of now
        Task 4 - Split into server and client
        Task 5 - Split into server and client, make client side send 20 requests per second using two separate threads
        Task 6 - Split into server and client, establish connection
        Task 7 - Link backend code to controller, part 1. Combine writes in service sensorStreams queues.
        Task 8 - Link backend code to controller, part 2. Link sensor streams with scheduled processing logic
        Task 9 - Debugging why stale messages are not deleted if the client stops. Fallback to Instant.now() in sliding window deletion logic.
        Task 10 - Start adding strategies, starting with normalization
        Task 11 - Split data ingestion and processsing
        Task 12 - Parallelize processing
        Task 13 - Make it one processor per sensor.
        Task 14 - Prepare acceleration output to fit elasticsearch
        Task 15 - Add elastic search config and repo + entity
        Task 16 - Add elastic search config and repo + entity. Add ISO dates for elastic search persistence via Instant toString().
        Task 17 - Refactor, add logging
        Task 18 - Split processing from outputting every 5 seconds. Currently they are bundled
        Task 19 - Migrate client to openfeign
        Task 20 - Create factory for new processors, make sliding window and polling rate configurable


        Task 20 - Dockerize, add elastic search

        Dont forget normalization
            Strategy pattern just in case?
        and DI

        More efficient processing
            Send lists in processors?

